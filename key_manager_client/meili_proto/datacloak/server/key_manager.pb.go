// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.8.0
// source: meili_proto/datacloak/server/key_manager.proto

package server

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CryptoAlgType int32

const (
	CryptoAlgType_SM_UNKNOWN CryptoAlgType = 0
	CryptoAlgType_SM2        CryptoAlgType = 1
	CryptoAlgType_SM3        CryptoAlgType = 2
	CryptoAlgType_SM4        CryptoAlgType = 3
)

// Enum value maps for CryptoAlgType.
var (
	CryptoAlgType_name = map[int32]string{
		0: "SM_UNKNOWN",
		1: "SM2",
		2: "SM3",
		3: "SM4",
	}
	CryptoAlgType_value = map[string]int32{
		"SM_UNKNOWN": 0,
		"SM2":        1,
		"SM3":        2,
		"SM4":        3,
	}
)

func (x CryptoAlgType) Enum() *CryptoAlgType {
	p := new(CryptoAlgType)
	*p = x
	return p
}

func (x CryptoAlgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CryptoAlgType) Descriptor() protoreflect.EnumDescriptor {
	return file_meili_proto_datacloak_server_key_manager_proto_enumTypes[0].Descriptor()
}

func (CryptoAlgType) Type() protoreflect.EnumType {
	return &file_meili_proto_datacloak_server_key_manager_proto_enumTypes[0]
}

func (x CryptoAlgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CryptoAlgType.Descriptor instead.
func (CryptoAlgType) EnumDescriptor() ([]byte, []int) {
	return file_meili_proto_datacloak_server_key_manager_proto_rawDescGZIP(), []int{0}
}

type DataCloakErrorCode int32

const (
	DataCloakErrorCode_DC_OK DataCloakErrorCode = 0
	//kms server
	DataCloakErrorCode_DC_KEY_MANAGER_SM3_HASH_FAILED       DataCloakErrorCode = 20000001
	DataCloakErrorCode_DC_KEY_MANAGER_SM3_HASH_UNKNOWN_TYPE DataCloakErrorCode = 20000002
	//AsymEncrypt/AsymDecrypt
	DataCloakErrorCode_DC_CRYPTO_ALG_INVALID DataCloakErrorCode = 30000001
	DataCloakErrorCode_DC_CRYPTO_FAILED      DataCloakErrorCode = 30000002
)

// Enum value maps for DataCloakErrorCode.
var (
	DataCloakErrorCode_name = map[int32]string{
		0:        "DC_OK",
		20000001: "DC_KEY_MANAGER_SM3_HASH_FAILED",
		20000002: "DC_KEY_MANAGER_SM3_HASH_UNKNOWN_TYPE",
		30000001: "DC_CRYPTO_ALG_INVALID",
		30000002: "DC_CRYPTO_FAILED",
	}
	DataCloakErrorCode_value = map[string]int32{
		"DC_OK":                                0,
		"DC_KEY_MANAGER_SM3_HASH_FAILED":       20000001,
		"DC_KEY_MANAGER_SM3_HASH_UNKNOWN_TYPE": 20000002,
		"DC_CRYPTO_ALG_INVALID":                30000001,
		"DC_CRYPTO_FAILED":                     30000002,
	}
)

func (x DataCloakErrorCode) Enum() *DataCloakErrorCode {
	p := new(DataCloakErrorCode)
	*p = x
	return p
}

func (x DataCloakErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataCloakErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_meili_proto_datacloak_server_key_manager_proto_enumTypes[1].Descriptor()
}

func (DataCloakErrorCode) Type() protoreflect.EnumType {
	return &file_meili_proto_datacloak_server_key_manager_proto_enumTypes[1]
}

func (x DataCloakErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataCloakErrorCode.Descriptor instead.
func (DataCloakErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_meili_proto_datacloak_server_key_manager_proto_rawDescGZIP(), []int{1}
}

type AsymDecryptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   CryptoAlgType `protobuf:"varint,1,opt,name=type,proto3,enum=datacloak.server.CryptoAlgType" json:"type,omitempty"`
	Msg    []byte        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	PriKey string        `protobuf:"bytes,3,opt,name=pri_key,json=priKey,proto3" json:"pri_key,omitempty"` // if type == SM2, pri_key is key index
}

func (x *AsymDecryptRequest) Reset() {
	*x = AsymDecryptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsymDecryptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsymDecryptRequest) ProtoMessage() {}

func (x *AsymDecryptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsymDecryptRequest.ProtoReflect.Descriptor instead.
func (*AsymDecryptRequest) Descriptor() ([]byte, []int) {
	return file_meili_proto_datacloak_server_key_manager_proto_rawDescGZIP(), []int{0}
}

func (x *AsymDecryptRequest) GetType() CryptoAlgType {
	if x != nil {
		return x.Type
	}
	return CryptoAlgType_SM_UNKNOWN
}

func (x *AsymDecryptRequest) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *AsymDecryptRequest) GetPriKey() string {
	if x != nil {
		return x.PriKey
	}
	return ""
}

type AsymDecryptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode    DataCloakErrorCode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=datacloak.server.DataCloakErrorCode" json:"error_code,omitempty"`
	ErrorMessage string             `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	Msg          []byte             `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *AsymDecryptResponse) Reset() {
	*x = AsymDecryptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsymDecryptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsymDecryptResponse) ProtoMessage() {}

func (x *AsymDecryptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsymDecryptResponse.ProtoReflect.Descriptor instead.
func (*AsymDecryptResponse) Descriptor() ([]byte, []int) {
	return file_meili_proto_datacloak_server_key_manager_proto_rawDescGZIP(), []int{1}
}

func (x *AsymDecryptResponse) GetErrorCode() DataCloakErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return DataCloakErrorCode_DC_OK
}

func (x *AsymDecryptResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *AsymDecryptResponse) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

type RandomUint64Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RandomUint64Request) Reset() {
	*x = RandomUint64Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RandomUint64Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomUint64Request) ProtoMessage() {}

func (x *RandomUint64Request) ProtoReflect() protoreflect.Message {
	mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomUint64Request.ProtoReflect.Descriptor instead.
func (*RandomUint64Request) Descriptor() ([]byte, []int) {
	return file_meili_proto_datacloak_server_key_manager_proto_rawDescGZIP(), []int{2}
}

type RandomUint64Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RandomUint64Response) Reset() {
	*x = RandomUint64Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RandomUint64Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomUint64Response) ProtoMessage() {}

func (x *RandomUint64Response) ProtoReflect() protoreflect.Message {
	mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomUint64Response.ProtoReflect.Descriptor instead.
func (*RandomUint64Response) Descriptor() ([]byte, []int) {
	return file_meili_proto_datacloak_server_key_manager_proto_rawDescGZIP(), []int{3}
}

type SymEncryptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SymEncryptRequest) Reset() {
	*x = SymEncryptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymEncryptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymEncryptRequest) ProtoMessage() {}

func (x *SymEncryptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymEncryptRequest.ProtoReflect.Descriptor instead.
func (*SymEncryptRequest) Descriptor() ([]byte, []int) {
	return file_meili_proto_datacloak_server_key_manager_proto_rawDescGZIP(), []int{4}
}

type SymEncryptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SymEncryptResponse) Reset() {
	*x = SymEncryptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymEncryptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymEncryptResponse) ProtoMessage() {}

func (x *SymEncryptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymEncryptResponse.ProtoReflect.Descriptor instead.
func (*SymEncryptResponse) Descriptor() ([]byte, []int) {
	return file_meili_proto_datacloak_server_key_manager_proto_rawDescGZIP(), []int{5}
}

type SymDecryptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SymDecryptRequest) Reset() {
	*x = SymDecryptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymDecryptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymDecryptRequest) ProtoMessage() {}

func (x *SymDecryptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymDecryptRequest.ProtoReflect.Descriptor instead.
func (*SymDecryptRequest) Descriptor() ([]byte, []int) {
	return file_meili_proto_datacloak_server_key_manager_proto_rawDescGZIP(), []int{6}
}

type SymDecryptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SymDecryptResponse) Reset() {
	*x = SymDecryptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymDecryptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymDecryptResponse) ProtoMessage() {}

func (x *SymDecryptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymDecryptResponse.ProtoReflect.Descriptor instead.
func (*SymDecryptResponse) Descriptor() ([]byte, []int) {
	return file_meili_proto_datacloak_server_key_manager_proto_rawDescGZIP(), []int{7}
}

type HashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type CryptoAlgType `protobuf:"varint,1,opt,name=type,proto3,enum=datacloak.server.CryptoAlgType" json:"type,omitempty"`
	Msg  []byte        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *HashRequest) Reset() {
	*x = HashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashRequest) ProtoMessage() {}

func (x *HashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashRequest.ProtoReflect.Descriptor instead.
func (*HashRequest) Descriptor() ([]byte, []int) {
	return file_meili_proto_datacloak_server_key_manager_proto_rawDescGZIP(), []int{8}
}

func (x *HashRequest) GetType() CryptoAlgType {
	if x != nil {
		return x.Type
	}
	return CryptoAlgType_SM_UNKNOWN
}

func (x *HashRequest) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

type HashResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode    DataCloakErrorCode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=datacloak.server.DataCloakErrorCode" json:"error_code,omitempty"`
	ErrorMessage string             `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	Msg          []byte             `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *HashResponse) Reset() {
	*x = HashResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashResponse) ProtoMessage() {}

func (x *HashResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashResponse.ProtoReflect.Descriptor instead.
func (*HashResponse) Descriptor() ([]byte, []int) {
	return file_meili_proto_datacloak_server_key_manager_proto_rawDescGZIP(), []int{9}
}

func (x *HashResponse) GetErrorCode() DataCloakErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return DataCloakErrorCode_DC_OK
}

func (x *HashResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *HashResponse) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

type AsymEncryptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   CryptoAlgType `protobuf:"varint,1,opt,name=type,proto3,enum=datacloak.server.CryptoAlgType" json:"type,omitempty"`
	Msg    []byte        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	PubKey string        `protobuf:"bytes,3,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
}

func (x *AsymEncryptRequest) Reset() {
	*x = AsymEncryptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsymEncryptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsymEncryptRequest) ProtoMessage() {}

func (x *AsymEncryptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsymEncryptRequest.ProtoReflect.Descriptor instead.
func (*AsymEncryptRequest) Descriptor() ([]byte, []int) {
	return file_meili_proto_datacloak_server_key_manager_proto_rawDescGZIP(), []int{10}
}

func (x *AsymEncryptRequest) GetType() CryptoAlgType {
	if x != nil {
		return x.Type
	}
	return CryptoAlgType_SM_UNKNOWN
}

func (x *AsymEncryptRequest) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *AsymEncryptRequest) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

type AsymEncryptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode    DataCloakErrorCode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=datacloak.server.DataCloakErrorCode" json:"error_code,omitempty"`
	ErrorMessage string             `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	Msg          []byte             `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *AsymEncryptResponse) Reset() {
	*x = AsymEncryptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsymEncryptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsymEncryptResponse) ProtoMessage() {}

func (x *AsymEncryptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsymEncryptResponse.ProtoReflect.Descriptor instead.
func (*AsymEncryptResponse) Descriptor() ([]byte, []int) {
	return file_meili_proto_datacloak_server_key_manager_proto_rawDescGZIP(), []int{11}
}

func (x *AsymEncryptResponse) GetErrorCode() DataCloakErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return DataCloakErrorCode_DC_OK
}

func (x *AsymEncryptResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *AsymEncryptResponse) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

type SignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   CryptoAlgType `protobuf:"varint,1,opt,name=type,proto3,enum=datacloak.server.CryptoAlgType" json:"type,omitempty"`
	Msg    []byte        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	PriKey string        `protobuf:"bytes,3,opt,name=pri_key,json=priKey,proto3" json:"pri_key,omitempty"` // if type == SM2, pri_key is key index
}

func (x *SignRequest) Reset() {
	*x = SignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRequest) ProtoMessage() {}

func (x *SignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRequest.ProtoReflect.Descriptor instead.
func (*SignRequest) Descriptor() ([]byte, []int) {
	return file_meili_proto_datacloak_server_key_manager_proto_rawDescGZIP(), []int{12}
}

func (x *SignRequest) GetType() CryptoAlgType {
	if x != nil {
		return x.Type
	}
	return CryptoAlgType_SM_UNKNOWN
}

func (x *SignRequest) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *SignRequest) GetPriKey() string {
	if x != nil {
		return x.PriKey
	}
	return ""
}

type SignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode    DataCloakErrorCode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=datacloak.server.DataCloakErrorCode" json:"error_code,omitempty"`
	ErrorMessage string             `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	Msg          []byte             `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *SignResponse) Reset() {
	*x = SignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignResponse) ProtoMessage() {}

func (x *SignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignResponse.ProtoReflect.Descriptor instead.
func (*SignResponse) Descriptor() ([]byte, []int) {
	return file_meili_proto_datacloak_server_key_manager_proto_rawDescGZIP(), []int{13}
}

func (x *SignResponse) GetErrorCode() DataCloakErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return DataCloakErrorCode_DC_OK
}

func (x *SignResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *SignResponse) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

type Sm2SignWithSm3Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg    []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	PriKey string `protobuf:"bytes,2,opt,name=pri_key,json=priKey,proto3" json:"pri_key,omitempty"` // use sm2, pri_key is key index
}

func (x *Sm2SignWithSm3Request) Reset() {
	*x = Sm2SignWithSm3Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sm2SignWithSm3Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sm2SignWithSm3Request) ProtoMessage() {}

func (x *Sm2SignWithSm3Request) ProtoReflect() protoreflect.Message {
	mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sm2SignWithSm3Request.ProtoReflect.Descriptor instead.
func (*Sm2SignWithSm3Request) Descriptor() ([]byte, []int) {
	return file_meili_proto_datacloak_server_key_manager_proto_rawDescGZIP(), []int{14}
}

func (x *Sm2SignWithSm3Request) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *Sm2SignWithSm3Request) GetPriKey() string {
	if x != nil {
		return x.PriKey
	}
	return ""
}

type Sm2SignWithSm3Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode    DataCloakErrorCode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=datacloak.server.DataCloakErrorCode" json:"error_code,omitempty"`
	ErrorMessage string             `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	Msg          []byte             `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *Sm2SignWithSm3Response) Reset() {
	*x = Sm2SignWithSm3Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sm2SignWithSm3Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sm2SignWithSm3Response) ProtoMessage() {}

func (x *Sm2SignWithSm3Response) ProtoReflect() protoreflect.Message {
	mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sm2SignWithSm3Response.ProtoReflect.Descriptor instead.
func (*Sm2SignWithSm3Response) Descriptor() ([]byte, []int) {
	return file_meili_proto_datacloak_server_key_manager_proto_rawDescGZIP(), []int{15}
}

func (x *Sm2SignWithSm3Response) GetErrorCode() DataCloakErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return DataCloakErrorCode_DC_OK
}

func (x *Sm2SignWithSm3Response) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *Sm2SignWithSm3Response) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

type Sm2VerifyWithSm3Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg    []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Sig    []byte `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
	PriKey string `protobuf:"bytes,3,opt,name=pri_key,json=priKey,proto3" json:"pri_key,omitempty"` // use sm2, pri_key is key index
}

func (x *Sm2VerifyWithSm3Request) Reset() {
	*x = Sm2VerifyWithSm3Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sm2VerifyWithSm3Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sm2VerifyWithSm3Request) ProtoMessage() {}

func (x *Sm2VerifyWithSm3Request) ProtoReflect() protoreflect.Message {
	mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sm2VerifyWithSm3Request.ProtoReflect.Descriptor instead.
func (*Sm2VerifyWithSm3Request) Descriptor() ([]byte, []int) {
	return file_meili_proto_datacloak_server_key_manager_proto_rawDescGZIP(), []int{16}
}

func (x *Sm2VerifyWithSm3Request) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *Sm2VerifyWithSm3Request) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

func (x *Sm2VerifyWithSm3Request) GetPriKey() string {
	if x != nil {
		return x.PriKey
	}
	return ""
}

type Sm2VerifyWithSm3Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode    DataCloakErrorCode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=datacloak.server.DataCloakErrorCode" json:"error_code,omitempty"`
	ErrorMessage string             `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *Sm2VerifyWithSm3Response) Reset() {
	*x = Sm2VerifyWithSm3Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sm2VerifyWithSm3Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sm2VerifyWithSm3Response) ProtoMessage() {}

func (x *Sm2VerifyWithSm3Response) ProtoReflect() protoreflect.Message {
	mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sm2VerifyWithSm3Response.ProtoReflect.Descriptor instead.
func (*Sm2VerifyWithSm3Response) Descriptor() ([]byte, []int) {
	return file_meili_proto_datacloak_server_key_manager_proto_rawDescGZIP(), []int{17}
}

func (x *Sm2VerifyWithSm3Response) GetErrorCode() DataCloakErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return DataCloakErrorCode_DC_OK
}

func (x *Sm2VerifyWithSm3Response) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type IssueGmCertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cname        string `protobuf:"bytes,1,opt,name=cname,proto3" json:"cname,omitempty"`
	ClientPubPem string `protobuf:"bytes,2,opt,name=client_pub_pem,json=clientPubPem,proto3" json:"client_pub_pem,omitempty"` // other parames just use default
}

func (x *IssueGmCertRequest) Reset() {
	*x = IssueGmCertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueGmCertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueGmCertRequest) ProtoMessage() {}

func (x *IssueGmCertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueGmCertRequest.ProtoReflect.Descriptor instead.
func (*IssueGmCertRequest) Descriptor() ([]byte, []int) {
	return file_meili_proto_datacloak_server_key_manager_proto_rawDescGZIP(), []int{18}
}

func (x *IssueGmCertRequest) GetCname() string {
	if x != nil {
		return x.Cname
	}
	return ""
}

func (x *IssueGmCertRequest) GetClientPubPem() string {
	if x != nil {
		return x.ClientPubPem
	}
	return ""
}

type IssueGmCertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode    DataCloakErrorCode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=datacloak.server.DataCloakErrorCode" json:"error_code,omitempty"`
	ErrorMessage string             `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	CertPem      string             `protobuf:"bytes,3,opt,name=cert_pem,json=certPem,proto3" json:"cert_pem,omitempty"`
}

func (x *IssueGmCertResponse) Reset() {
	*x = IssueGmCertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueGmCertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueGmCertResponse) ProtoMessage() {}

func (x *IssueGmCertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meili_proto_datacloak_server_key_manager_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueGmCertResponse.ProtoReflect.Descriptor instead.
func (*IssueGmCertResponse) Descriptor() ([]byte, []int) {
	return file_meili_proto_datacloak_server_key_manager_proto_rawDescGZIP(), []int{19}
}

func (x *IssueGmCertResponse) GetErrorCode() DataCloakErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return DataCloakErrorCode_DC_OK
}

func (x *IssueGmCertResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *IssueGmCertResponse) GetCertPem() string {
	if x != nil {
		return x.CertPem
	}
	return ""
}

var File_meili_proto_datacloak_server_key_manager_proto protoreflect.FileDescriptor

var file_meili_proto_datacloak_server_key_manager_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x6d, 0x65, 0x69, 0x6c, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x6b,
	0x65, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x10, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x22, 0x74, 0x0a, 0x12, 0x41, 0x73, 0x79, 0x6d, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6c, 0x6f,
	0x61, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x41, 0x6c, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x72, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x91, 0x01, 0x0a, 0x13, 0x41, 0x73, 0x79,
	0x6d, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x43, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6c, 0x6f, 0x61, 0x6b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x6f, 0x61,
	0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x15, 0x0a, 0x13,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x53,
	0x79, 0x6d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x14, 0x0a, 0x12, 0x53, 0x79, 0x6d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x79, 0x6d, 0x44, 0x65, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x53,
	0x79, 0x6d, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x54, 0x0a, 0x0b, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x8a, 0x01, 0x0a, 0x0c, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x6f, 0x61, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x22, 0x74, 0x0a, 0x12, 0x41, 0x73, 0x79, 0x6d, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63,
	0x6c, 0x6f, 0x61, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x41, 0x6c, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x22, 0x91, 0x01, 0x0a, 0x13, 0x41,
	0x73, 0x79, 0x6d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6c, 0x6f,
	0x61, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c,
	0x6f, 0x61, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x6d,
	0x0a, 0x0b, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x8a, 0x01,
	0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x6f, 0x61, 0x6b, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x42, 0x0a, 0x15, 0x53, 0x6d,
	0x32, 0x53, 0x69, 0x67, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x53, 0x6d, 0x33, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x94,
	0x01, 0x0a, 0x16, 0x53, 0x6d, 0x32, 0x53, 0x69, 0x67, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x53, 0x6d,
	0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x6f, 0x61, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x56, 0x0a, 0x17, 0x53, 0x6d, 0x32, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x57, 0x69, 0x74, 0x68, 0x53, 0x6d, 0x33, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x73, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x84, 0x01,
	0x0a, 0x18, 0x53, 0x6d, 0x32, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x57, 0x69, 0x74, 0x68, 0x53,
	0x6d, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x6f, 0x61, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x50, 0x0a, 0x12, 0x49, 0x73, 0x73, 0x75, 0x65, 0x47, 0x6d, 0x43,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x70,
	0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x50, 0x75, 0x62, 0x50, 0x65, 0x6d, 0x22, 0x9a, 0x01, 0x0a, 0x13, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x47, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x6f, 0x61, 0x6b, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x65, 0x72, 0x74,
	0x5f, 0x70, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x65, 0x72, 0x74,
	0x50, 0x65, 0x6d, 0x2a, 0x3a, 0x0a, 0x0d, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x4d, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x4d, 0x32, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x53, 0x4d, 0x33, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x4d, 0x34, 0x10, 0x03, 0x2a,
	0xaa, 0x01, 0x0a, 0x12, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x6f, 0x61, 0x6b, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x43, 0x5f, 0x4f, 0x4b, 0x10,
	0x00, 0x12, 0x25, 0x0a, 0x1e, 0x44, 0x43, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x52, 0x5f, 0x53, 0x4d, 0x33, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x81, 0xda, 0xc4, 0x09, 0x12, 0x2b, 0x0a, 0x24, 0x44, 0x43, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x53, 0x4d, 0x33, 0x5f, 0x48,
	0x41, 0x53, 0x48, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x82, 0xda, 0xc4, 0x09, 0x12, 0x1c, 0x0a, 0x15, 0x44, 0x43, 0x5f, 0x43, 0x52, 0x59, 0x50,
	0x54, 0x4f, 0x5f, 0x41, 0x4c, 0x47, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x81,
	0x87, 0xa7, 0x0e, 0x12, 0x17, 0x0a, 0x10, 0x44, 0x43, 0x5f, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x82, 0x87, 0xa7, 0x0e, 0x32, 0xa5, 0x07, 0x0a,
	0x0a, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x04, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x1d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x5c, 0x0a, 0x0b, 0x41, 0x73, 0x79, 0x6d, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6c, 0x6f, 0x61,
	0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x73, 0x79, 0x6d, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41,
	0x73, 0x79, 0x6d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0b, 0x41, 0x73, 0x79, 0x6d, 0x44, 0x65, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x12, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x73, 0x79, 0x6d, 0x44, 0x65, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x73, 0x79,
	0x6d, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x47, 0x0a, 0x04, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x1d, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0e, 0x53,
	0x6d, 0x32, 0x53, 0x69, 0x67, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x53, 0x6d, 0x33, 0x12, 0x27, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x6d, 0x32, 0x53, 0x69, 0x67, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x53, 0x6d, 0x33, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6c, 0x6f,
	0x61, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x6d, 0x32, 0x53, 0x69, 0x67,
	0x6e, 0x57, 0x69, 0x74, 0x68, 0x53, 0x6d, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6b, 0x0a, 0x10, 0x53, 0x6d, 0x32, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x57,
	0x69, 0x74, 0x68, 0x53, 0x6d, 0x33, 0x12, 0x29, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6c, 0x6f,
	0x61, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x6d, 0x32, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x57, 0x69, 0x74, 0x68, 0x53, 0x6d, 0x33, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x6d, 0x32, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x57, 0x69,
	0x74, 0x68, 0x53, 0x6d, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5c, 0x0a, 0x0b, 0x49, 0x73, 0x73, 0x75, 0x65, 0x47, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x12, 0x24,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x47, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6c, 0x6f, 0x61, 0x6b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x47, 0x6d, 0x43,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a,
	0x0c, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x25, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6c, 0x6f, 0x61, 0x6b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59,
	0x0a, 0x0a, 0x53, 0x79, 0x6d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x23, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x79, 0x6d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x6d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0a, 0x53, 0x79, 0x6d,
	0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6c,
	0x6f, 0x61, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x6d, 0x44, 0x65,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x79, 0x6d, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x6f,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x69, 0x6c, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_meili_proto_datacloak_server_key_manager_proto_rawDescOnce sync.Once
	file_meili_proto_datacloak_server_key_manager_proto_rawDescData = file_meili_proto_datacloak_server_key_manager_proto_rawDesc
)

func file_meili_proto_datacloak_server_key_manager_proto_rawDescGZIP() []byte {
	file_meili_proto_datacloak_server_key_manager_proto_rawDescOnce.Do(func() {
		file_meili_proto_datacloak_server_key_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_meili_proto_datacloak_server_key_manager_proto_rawDescData)
	})
	return file_meili_proto_datacloak_server_key_manager_proto_rawDescData
}

var file_meili_proto_datacloak_server_key_manager_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_meili_proto_datacloak_server_key_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_meili_proto_datacloak_server_key_manager_proto_goTypes = []interface{}{
	(CryptoAlgType)(0),               // 0: datacloak.server.CryptoAlgType
	(DataCloakErrorCode)(0),          // 1: datacloak.server.DataCloakErrorCode
	(*AsymDecryptRequest)(nil),       // 2: datacloak.server.AsymDecryptRequest
	(*AsymDecryptResponse)(nil),      // 3: datacloak.server.AsymDecryptResponse
	(*RandomUint64Request)(nil),      // 4: datacloak.server.RandomUint64Request
	(*RandomUint64Response)(nil),     // 5: datacloak.server.RandomUint64Response
	(*SymEncryptRequest)(nil),        // 6: datacloak.server.SymEncryptRequest
	(*SymEncryptResponse)(nil),       // 7: datacloak.server.SymEncryptResponse
	(*SymDecryptRequest)(nil),        // 8: datacloak.server.SymDecryptRequest
	(*SymDecryptResponse)(nil),       // 9: datacloak.server.SymDecryptResponse
	(*HashRequest)(nil),              // 10: datacloak.server.HashRequest
	(*HashResponse)(nil),             // 11: datacloak.server.HashResponse
	(*AsymEncryptRequest)(nil),       // 12: datacloak.server.AsymEncryptRequest
	(*AsymEncryptResponse)(nil),      // 13: datacloak.server.AsymEncryptResponse
	(*SignRequest)(nil),              // 14: datacloak.server.SignRequest
	(*SignResponse)(nil),             // 15: datacloak.server.SignResponse
	(*Sm2SignWithSm3Request)(nil),    // 16: datacloak.server.Sm2SignWithSm3Request
	(*Sm2SignWithSm3Response)(nil),   // 17: datacloak.server.Sm2SignWithSm3Response
	(*Sm2VerifyWithSm3Request)(nil),  // 18: datacloak.server.Sm2VerifyWithSm3Request
	(*Sm2VerifyWithSm3Response)(nil), // 19: datacloak.server.Sm2VerifyWithSm3Response
	(*IssueGmCertRequest)(nil),       // 20: datacloak.server.IssueGmCertRequest
	(*IssueGmCertResponse)(nil),      // 21: datacloak.server.IssueGmCertResponse
}
var file_meili_proto_datacloak_server_key_manager_proto_depIdxs = []int32{
	0,  // 0: datacloak.server.AsymDecryptRequest.type:type_name -> datacloak.server.CryptoAlgType
	1,  // 1: datacloak.server.AsymDecryptResponse.error_code:type_name -> datacloak.server.DataCloakErrorCode
	0,  // 2: datacloak.server.HashRequest.type:type_name -> datacloak.server.CryptoAlgType
	1,  // 3: datacloak.server.HashResponse.error_code:type_name -> datacloak.server.DataCloakErrorCode
	0,  // 4: datacloak.server.AsymEncryptRequest.type:type_name -> datacloak.server.CryptoAlgType
	1,  // 5: datacloak.server.AsymEncryptResponse.error_code:type_name -> datacloak.server.DataCloakErrorCode
	0,  // 6: datacloak.server.SignRequest.type:type_name -> datacloak.server.CryptoAlgType
	1,  // 7: datacloak.server.SignResponse.error_code:type_name -> datacloak.server.DataCloakErrorCode
	1,  // 8: datacloak.server.Sm2SignWithSm3Response.error_code:type_name -> datacloak.server.DataCloakErrorCode
	1,  // 9: datacloak.server.Sm2VerifyWithSm3Response.error_code:type_name -> datacloak.server.DataCloakErrorCode
	1,  // 10: datacloak.server.IssueGmCertResponse.error_code:type_name -> datacloak.server.DataCloakErrorCode
	10, // 11: datacloak.server.KeyManager.Hash:input_type -> datacloak.server.HashRequest
	12, // 12: datacloak.server.KeyManager.AsymEncrypt:input_type -> datacloak.server.AsymEncryptRequest
	2,  // 13: datacloak.server.KeyManager.AsymDecrypt:input_type -> datacloak.server.AsymDecryptRequest
	14, // 14: datacloak.server.KeyManager.Sign:input_type -> datacloak.server.SignRequest
	16, // 15: datacloak.server.KeyManager.Sm2SignWithSm3:input_type -> datacloak.server.Sm2SignWithSm3Request
	18, // 16: datacloak.server.KeyManager.Sm2VerifyWithSm3:input_type -> datacloak.server.Sm2VerifyWithSm3Request
	20, // 17: datacloak.server.KeyManager.IssueGmCert:input_type -> datacloak.server.IssueGmCertRequest
	4,  // 18: datacloak.server.KeyManager.RandomUint64:input_type -> datacloak.server.RandomUint64Request
	6,  // 19: datacloak.server.KeyManager.SymEncrypt:input_type -> datacloak.server.SymEncryptRequest
	8,  // 20: datacloak.server.KeyManager.SymDecrypt:input_type -> datacloak.server.SymDecryptRequest
	11, // 21: datacloak.server.KeyManager.Hash:output_type -> datacloak.server.HashResponse
	13, // 22: datacloak.server.KeyManager.AsymEncrypt:output_type -> datacloak.server.AsymEncryptResponse
	3,  // 23: datacloak.server.KeyManager.AsymDecrypt:output_type -> datacloak.server.AsymDecryptResponse
	15, // 24: datacloak.server.KeyManager.Sign:output_type -> datacloak.server.SignResponse
	17, // 25: datacloak.server.KeyManager.Sm2SignWithSm3:output_type -> datacloak.server.Sm2SignWithSm3Response
	19, // 26: datacloak.server.KeyManager.Sm2VerifyWithSm3:output_type -> datacloak.server.Sm2VerifyWithSm3Response
	21, // 27: datacloak.server.KeyManager.IssueGmCert:output_type -> datacloak.server.IssueGmCertResponse
	5,  // 28: datacloak.server.KeyManager.RandomUint64:output_type -> datacloak.server.RandomUint64Response
	7,  // 29: datacloak.server.KeyManager.SymEncrypt:output_type -> datacloak.server.SymEncryptResponse
	9,  // 30: datacloak.server.KeyManager.SymDecrypt:output_type -> datacloak.server.SymDecryptResponse
	21, // [21:31] is the sub-list for method output_type
	11, // [11:21] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_meili_proto_datacloak_server_key_manager_proto_init() }
func file_meili_proto_datacloak_server_key_manager_proto_init() {
	if File_meili_proto_datacloak_server_key_manager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_meili_proto_datacloak_server_key_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsymDecryptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meili_proto_datacloak_server_key_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsymDecryptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meili_proto_datacloak_server_key_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RandomUint64Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meili_proto_datacloak_server_key_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RandomUint64Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meili_proto_datacloak_server_key_manager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymEncryptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meili_proto_datacloak_server_key_manager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymEncryptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meili_proto_datacloak_server_key_manager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymDecryptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meili_proto_datacloak_server_key_manager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymDecryptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meili_proto_datacloak_server_key_manager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meili_proto_datacloak_server_key_manager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meili_proto_datacloak_server_key_manager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsymEncryptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meili_proto_datacloak_server_key_manager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsymEncryptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meili_proto_datacloak_server_key_manager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meili_proto_datacloak_server_key_manager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meili_proto_datacloak_server_key_manager_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sm2SignWithSm3Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meili_proto_datacloak_server_key_manager_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sm2SignWithSm3Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meili_proto_datacloak_server_key_manager_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sm2VerifyWithSm3Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meili_proto_datacloak_server_key_manager_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sm2VerifyWithSm3Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meili_proto_datacloak_server_key_manager_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueGmCertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meili_proto_datacloak_server_key_manager_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueGmCertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_meili_proto_datacloak_server_key_manager_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_meili_proto_datacloak_server_key_manager_proto_goTypes,
		DependencyIndexes: file_meili_proto_datacloak_server_key_manager_proto_depIdxs,
		EnumInfos:         file_meili_proto_datacloak_server_key_manager_proto_enumTypes,
		MessageInfos:      file_meili_proto_datacloak_server_key_manager_proto_msgTypes,
	}.Build()
	File_meili_proto_datacloak_server_key_manager_proto = out.File
	file_meili_proto_datacloak_server_key_manager_proto_rawDesc = nil
	file_meili_proto_datacloak_server_key_manager_proto_goTypes = nil
	file_meili_proto_datacloak_server_key_manager_proto_depIdxs = nil
}
